-- ESP System for Leaf Hub Rewrite
-- This should be loaded as a separate loadstring module

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- ESP Module
local ESPModule = {}

-- ESP Settings
local ESP = {
    Enabled = false,
    Settings = {
        ESPType = "Box", -- "Box" or "Highlight"
        ShowNames = true,
        ShowHealth = true,
        ShowHealthBar = true,
        ShowDistance = true,
        MaxDistance = 2000,
        TeamCheck = false,
        PlayerColor = Color3.fromRGB(255, 0, 0),
        BoxWidth = 4,
        BoxHeight = 6
    }
}

-- Keep track of all ESP objects
local ESPObjects = {}

-- Create ESP object for a player
local function CreateESPObject(player)
    if not player or player == LocalPlayer then return end
    
    local espObject = {
        Player = player,
        Drawings = {
            Box = Drawing.new("Square"),
            Name = Drawing.new("Text"),
            Health = Drawing.new("Text"),
            HealthBar = Drawing.new("Line"),
            HealthBarBackground = Drawing.new("Line"),
            Distance = Drawing.new("Text")
        },
        Highlight = nil
    }
    
    -- Configure drawing objects
    espObject.Drawings.Box.Thickness = 1
    espObject.Drawings.Box.Filled = false
    espObject.Drawings.Box.Color = ESP.Settings.PlayerColor
    espObject.Drawings.Box.Visible = false
    
    espObject.Drawings.Name.Size = 16
    espObject.Drawings.Name.Center = true
    espObject.Drawings.Name.Outline = true
    espObject.Drawings.Name.Color = ESP.Settings.PlayerColor
    espObject.Drawings.Name.Visible = false
    
    espObject.Drawings.Health.Size = 14
    espObject.Drawings.Health.Center = true
    espObject.Drawings.Health.Outline = true
    espObject.Drawings.Health.Color = ESP.Settings.PlayerColor
    espObject.Drawings.Health.Visible = false
    
    -- Health bar settings (vertical)
    espObject.Drawings.HealthBarBackground.Thickness = 4
    espObject.Drawings.HealthBarBackground.Color = Color3.fromRGB(0, 0, 0)
    espObject.Drawings.HealthBarBackground.Visible = false
    
    espObject.Drawings.HealthBar.Thickness = 2
    espObject.Drawings.HealthBar.Color = Color3.fromRGB(0, 255, 0)
    espObject.Drawings.HealthBar.Visible = false
    
    espObject.Drawings.Distance.Size = 14
    espObject.Drawings.Distance.Center = true
    espObject.Drawings.Distance.Outline = true
    espObject.Drawings.Distance.Color = ESP.Settings.PlayerColor
    espObject.Drawings.Distance.Visible = false
    
    ESPObjects[player] = espObject
    return espObject
end

-- Create or update highlight for a player
local function CreateHighlight(player)
    local espObject = ESPObjects[player]
    if not espObject or not player.Character then return end
    
    -- Remove existing highlight if it exists
    if espObject.Highlight then
        pcall(function() espObject.Highlight:Destroy() end)
        espObject.Highlight = nil
    end
    
    -- Create new highlight
    local success, highlight = pcall(function()
        local h = Instance.new("Highlight")
        h.Parent = player.Character
        h.FillColor = ESP.Settings.PlayerColor
        h.OutlineColor = ESP.Settings.PlayerColor
        h.FillTransparency = 0.5
        h.OutlineTransparency = 0
        h.Adornee = player.Character
        return h
    end)
    
    if success then
        espObject.Highlight = highlight
    end
end

-- Remove ESP object when player leaves
local function RemoveESPObject(player)
    local espObject = ESPObjects[player]
    if not espObject then return end
    
    -- Remove highlight
    if espObject.Highlight then
        pcall(function() espObject.Highlight:Destroy() end)
    end
    
    -- Remove drawings
    for _, drawing in pairs(espObject.Drawings) do
        pcall(function()
            if drawing and drawing.Remove then
                drawing:Remove()
            end
        end)
    end
    
    ESPObjects[player] = nil
end

-- Update ESP for a player
local function UpdateESP(player)
    if not player or not player.Parent then return end
    
    local espObject = ESPObjects[player]
    if not espObject then return end
    
    -- Check if ESP is enabled
    if not ESP.Enabled then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
        return
    end
    
    -- Check if player's character exists
    local character
    local success = pcall(function() character = player.Character end)
    
    if not success or not character then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
        return
    end
    
    -- Find required parts
    local rootPart, humanoid
    success = pcall(function()
        rootPart = character:FindFirstChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end)
    
    if not success or not rootPart or not humanoid then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
        return
    end
    
    -- Check team if team check is enabled
    -- Team check removed as requested
    
    -- Get data for ESP
    local position = rootPart.Position
    local camera = workspace.CurrentCamera
    local myRootPart
    
    success = pcall(function()
        myRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    end)
    
    if not success or not myRootPart then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
        return
    end
    
    -- Calculate distance
    local distance = (myRootPart.Position - position).Magnitude
    
    -- Check if player is within max distance
    if distance > ESP.Settings.MaxDistance then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
        return
    end
    
    -- Handle Highlight ESP
    if ESP.Settings.ESPType == "Highlight" then
        -- Hide all drawings except name, health text, and distance
        espObject.Drawings.Box.Visible = false
        espObject.Drawings.HealthBar.Visible = false
        espObject.Drawings.HealthBarBackground.Visible = false
        
        -- Create or update highlight
        if not espObject.Highlight or not espObject.Highlight.Parent then
            CreateHighlight(player)
        end
        
        if espObject.Highlight then
            espObject.Highlight.Enabled = true
            espObject.Highlight.FillColor = ESP.Settings.PlayerColor
            espObject.Highlight.OutlineColor = ESP.Settings.PlayerColor
        end
    else
        -- Hide highlight for box ESP
        if espObject.Highlight then
            espObject.Highlight.Enabled = false
        end
    end
    
    -- Calculate screen position
    local screenPosition, onScreen
    success = pcall(function()
        screenPosition, onScreen = camera:WorldToViewportPoint(position)
    end)
    
    if not success or not onScreen then
        for _, drawing in pairs(espObject.Drawings) do
            drawing.Visible = false
        end
        return
    end
    
    -- Calculate box size based on distance
    local sizeFactor = math.clamp(1000 / distance, 0.5, 3)
    local width = ESP.Settings.BoxWidth * sizeFactor * 10
    local height = ESP.Settings.BoxHeight * sizeFactor * 10
    
    -- Box position (centered on screen position)
    local boxX = screenPosition.X - width/2
    local boxY = screenPosition.Y - height/2
    
    -- Update box (only for Box ESP)
    if ESP.Settings.ESPType == "Box" then
        espObject.Drawings.Box.Size = Vector2.new(width, height)
        espObject.Drawings.Box.Position = Vector2.new(boxX, boxY)
        espObject.Drawings.Box.Visible = true
        espObject.Drawings.Box.Color = ESP.Settings.PlayerColor
    else
        espObject.Drawings.Box.Visible = false
    end
    
    -- Update name - position above the box/player
    local displayName = ""
    pcall(function() displayName = player:GetAttribute("CharacterName") or player.Name end)
    
    espObject.Drawings.Name.Text = displayName
    espObject.Drawings.Name.Position = Vector2.new(screenPosition.X, boxY - 20)
    espObject.Drawings.Name.Visible = ESP.Settings.ShowNames
    espObject.Drawings.Name.Color = ESP.Settings.PlayerColor
    
    -- Update health
    local health = 0
    local maxHealth = 0
    pcall(function()
        health = humanoid.Health
        maxHealth = humanoid.MaxHealth
    end)
    
    local healthPercentage = maxHealth > 0 and (health / maxHealth) or 0
    local healthText = string.format("HP: %.0f/%.0f", health, maxHealth)
    
    espObject.Drawings.Health.Text = healthText
    espObject.Drawings.Health.Position = Vector2.new(screenPosition.X, boxY - 5)
    espObject.Drawings.Health.Visible = ESP.Settings.ShowHealth
    espObject.Drawings.Health.Color = ESP.Settings.PlayerColor
    
    -- Update vertical health bar (only if enabled and using Box ESP)
    if ESP.Settings.ShowHealthBar and ESP.Settings.ESPType == "Box" then
        local healthBarHeight = height
        local healthBarX = boxX - 8 -- Position to the left of the box
        
        -- Background bar (full height)
        espObject.Drawings.HealthBarBackground.From = Vector2.new(healthBarX, boxY)
        espObject.Drawings.HealthBarBackground.To = Vector2.new(healthBarX, boxY + healthBarHeight)
        espObject.Drawings.HealthBarBackground.Visible = true
        
        -- Health bar (percentage of height from bottom)
        local barHeight = math.max(healthBarHeight * healthPercentage, 2)
        local barStartY = boxY + healthBarHeight - barHeight
        
        espObject.Drawings.HealthBar.From = Vector2.new(healthBarX, barStartY)
        espObject.Drawings.HealthBar.To = Vector2.new(healthBarX, boxY + healthBarHeight)
        
        -- Color the health bar based on health percentage
        if healthPercentage > 0.6 then
            espObject.Drawings.HealthBar.Color = Color3.fromRGB(0, 255, 0) -- Green
        elseif healthPercentage > 0.3 then
            espObject.Drawings.HealthBar.Color = Color3.fromRGB(255, 255, 0) -- Yellow
        else
            espObject.Drawings.HealthBar.Color = Color3.fromRGB(255, 0, 0) -- Red
        end
        
        espObject.Drawings.HealthBar.Visible = true
    else
        espObject.Drawings.HealthBar.Visible = false
        espObject.Drawings.HealthBarBackground.Visible = false
    end
    
    -- Update distance
    espObject.Drawings.Distance.Text = string.format("%.0fm", distance)
    espObject.Drawings.Distance.Position = Vector2.new(screenPosition.X, boxY + height)
    espObject.Drawings.Distance.Visible = ESP.Settings.ShowDistance
    espObject.Drawings.Distance.Color = ESP.Settings.PlayerColor
end

-- Update all ESP colors
local function UpdateESPColors()
    for _, espObject in pairs(ESPObjects) do
        pcall(function()
            if espObject.Drawings.Box then
                espObject.Drawings.Box.Color = ESP.Settings.PlayerColor
            end
            if espObject.Drawings.Name then
                espObject.Drawings.Name.Color = ESP.Settings.PlayerColor
            end
            if espObject.Drawings.Health then
                espObject.Drawings.Health.Color = ESP.Settings.PlayerColor
            end
            if espObject.Drawings.Distance then
                espObject.Drawings.Distance.Color = ESP.Settings.PlayerColor
            end
            if espObject.Highlight then
                espObject.Highlight.FillColor = ESP.Settings.PlayerColor
                espObject.Highlight.OutlineColor = ESP.Settings.PlayerColor
            end
        end)
    end
end

-- Handle character respawning for highlights
local function OnCharacterAdded(player, character)
    if ESP.Settings.ESPType == "Highlight" then
        -- Small delay to ensure character is fully loaded
        wait(0.1)
        CreateHighlight(player)
    end
end

-- Initialize ESP system
local function InitializeESP()
    -- Setup players
    pcall(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player and player ~= LocalPlayer then
                pcall(function() 
                    CreateESPObject(player)
                    if player.Character then
                        OnCharacterAdded(player, player.Character)
                    end
                end)
            end
        end
        
        Players.PlayerAdded:Connect(function(player)
            if player and player ~= LocalPlayer then
                pcall(function() 
                    CreateESPObject(player)
                    player.CharacterAdded:Connect(function(character)
                        OnCharacterAdded(player, character)
                    end)
                end)
            end
        end)
        
        Players.PlayerRemoving:Connect(function(player)
            pcall(function() RemoveESPObject(player) end)
        end)
        
        -- Handle existing character spawning
        for _, player in pairs(Players:GetPlayers()) do
            if player and player ~= LocalPlayer then
                player.CharacterAdded:Connect(function(character)
                    OnCharacterAdded(player, character)
                end)
            end
        end
    end)
    
    -- Update ESP objects every frame
    pcall(function()
        RunService:BindToRenderStep("ESP", 200, function()
            pcall(function()
                for player, espObject in pairs(ESPObjects) do
                    if player then
                        pcall(function() UpdateESP(player) end)
                    end
                end
            end)
        end)
    end)
end

-- ESP Module Functions
function ESPModule.SetupESP(ESPCategory, Window)
    -- Create ESP Button and Sections
    local ESPButton = ESPCategory:Button("ESP Options", "http://www.roblox.com/asset/?id=8395621517")
    local ESPSectionLeft = ESPButton:Section("ESP Features", "Left")
    local ESPSectionRight = ESPButton:Section("ESP Settings", "Right")
    
    -- Store GUI elements for dynamic updates
    local GUIElements = {}
    
    -- Function to refresh GUI sections based on ESP type
    local function RefreshGUISections()
        -- Clear existing elements
        for _, element in pairs(GUIElements) do
            if element and element.Destroy then
                pcall(function() element:Destroy() end)
            end
        end
        GUIElements = {}
        
        -- Recreate sections
        ESPSectionLeft = ESPButton:Section("ESP Features", "Left")
        ESPSectionRight = ESPButton:Section("ESP Settings", "Right")
        
        -- Recreate all elements
        CreateGUIElements()
    end
    
    -- Function to create GUI elements
    local function CreateGUIElements()
        -- Main ESP Toggle
        GUIElements.ESPToggle = ESPSectionLeft:Toggle({
            Title = "ESP Enabled",
            Description = "Enable/Disable ESP system",
            Default = ESP.Enabled
        }, function(value)
            ESP.Enabled = value
            if value then
                Window:Notification({
                    Title = "ESP",
                    Description = "ESP system enabled!"
                })
            else
                Window:Notification({
                    Title = "ESP", 
                    Description = "ESP system disabled!"
                })
            end
        end)
        
        -- ESP Type Dropdown
        GUIElements.ESPTypeDropdown = ESPSectionLeft:Dropdown({
            Title = "ESP Type",
            Description = "Choose between Box or Highlight ESP",
            Options = {"Box", "Highlight"},
            Default = ESP.Settings.ESPType
        }, function(value)
            ESP.Settings.ESPType = value
            
            -- Update all highlights based on new type
            for player, espObject in pairs(ESPObjects) do
                if value == "Highlight" then
                    CreateHighlight(player)
                elseif espObject.Highlight then
                    espObject.Highlight.Enabled = false
                end
            end
            
            -- Refresh the GUI sections to show/hide relevant options
            RefreshGUISections()
            
            Window:Notification({
                Title = "ESP",
                Description = "ESP type changed to " .. value
            })
        end)
        
        -- Show Names Toggle
        GUIElements.ShowNames = ESPSectionLeft:Toggle({
            Title = "Show Names",
            Description = "Display player names",
            Default = ESP.Settings.ShowNames
        }, function(value)
            ESP.Settings.ShowNames = value
        end)
        
        -- Show Health Toggle
        GUIElements.ShowHealth = ESPSectionLeft:Toggle({
            Title = "Show Health",
            Description = "Display player health text",
            Default = ESP.Settings.ShowHealth
        }, function(value)
            ESP.Settings.ShowHealth = value
        end)
        
        -- Show Distance Toggle
        GUIElements.ShowDistance = ESPSectionLeft:Toggle({
            Title = "Show Distance",
            Description = "Display distance to players",
            Default = ESP.Settings.ShowDistance
        }, function(value)
            ESP.Settings.ShowDistance = value
        end)
        
        -- Box ESP specific options
        if ESP.Settings.ESPType == "Box" then
            -- Show Health Bar Toggle (Box ESP only)
            GUIElements.ShowHealthBar = ESPSectionLeft:Toggle({
                Title = "Show Health Bar",
                Description = "Display vertical health bar",
                Default = ESP.Settings.ShowHealthBar
            }, function(value)
                ESP.Settings.ShowHealthBar = value
            end)
            
            -- Box Width Slider
            GUIElements.BoxWidth = ESPSectionRight:Slider({
                Title = "Box Width",
                Description = "Width of ESP boxes",
                Default = ESP.Settings.BoxWidth,
                Min = 1,
                Max = 10
            }, function(value)
                ESP.Settings.BoxWidth = value
            end)
            
            -- Box Height Slider  
            GUIElements.BoxHeight = ESPSectionRight:Slider({
                Title = "Box Height",
                Description = "Height of ESP boxes",
                Default = ESP.Settings.BoxHeight,
                Min = 1,
                Max = 15
            }, function(value)
                ESP.Settings.BoxHeight = value
            end)
        end
        
        -- Common settings for both types
        -- Max Distance Slider
        GUIElements.MaxDistance = ESPSectionRight:Slider({
            Title = "Max Distance",
            Description = "Maximum ESP render distance",
            Default = ESP.Settings.MaxDistance,
            Min = 500,
            Max = 5000
        }, function(value)
            ESP.Settings.MaxDistance = value
        end)
        
        -- Player Color Picker
        GUIElements.PlayerColor = ESPSectionRight:ColorPicker({
            Title = "Player Color",
            Description = "Color for ESP elements",
            Default = ESP.Settings.PlayerColor
        }, function(color)
            ESP.Settings.PlayerColor = color
            UpdateESPColors()
        end)
        
        -- Clear ESP Button
        GUIElements.ClearESP = ESPSectionRight:Button({
            Title = "Clear ESP",
            ButtonName = "Clear",
            Description = "Remove all ESP objects"
        }, function()
            for player, espObject in pairs(ESPObjects) do
                RemoveESPObject(player)
            end
            Window:Notification({
                Title = "ESP",
                Description = "All ESP objects cleared!"
            })
        end)
    end
    
    -- Initial GUI creation
    CreateGUIElements()
    
    -- Initialize the ESP system
    InitializeESP()
    
    -- Return ESP controls for external access
    return {
        ToggleESP = function(enabled)
            ESP.Enabled = enabled
        end,
        SetESPType = function(espType)
            ESP.Settings.ESPType = espType
        end,
        SetPlayerColor = function(color)
            ESP.Settings.PlayerColor = color
            UpdateESPColors()
        end,
        SetMaxDistance = function(distance)
            ESP.Settings.MaxDistance = distance
        end,
        GetSettings = function()
            return {
                Enabled = ESP.Enabled,
                Settings = ESP.Settings
            }
        end,
        RemoveAll = function()
            for player, espObject in pairs(ESPObjects) do
                RemoveESPObject(player)
            end
        end
    }
end

return ESPModule
